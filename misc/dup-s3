#!/usr/bin/python

## tkooda : 2015-02-20 : simple duplicity backup script, specify S3 bucket, and list of dirs to backup
## tkooda : 2015-03-06 : rewrote in python because escaping optional duplicity args in bash was a mess
## 2017-09-27 : kmogged : Added support to pass through --verbosity and --no-print-statistics arguments to duplicity.
##                        Attempted to support all styles of duplicity's --verbosity values.
##                        This allows dup-s3 to be ran completely silent unless there is an error.
##                        Also added a convenient --silent argument to set duplicity to a silent error only function.

## from:  https://github.com/tkooda/util/blob/master/misc/dup-s3


## EXAMPLE USAGE:
##   dup-s3 --dry-run --exclude '**.git' s3+http://my-s3-bucket/my-machine-name /some/files/ /more/stuff/


## NOTE: duplicity will mark dirs/files as deleted from the archive if you remove dirs from it's own arg list, so we upload each directory argument on the command line separately


from __future__ import print_function
import os
import re
import sys
import fcntl
import argparse
import subprocess
import socket # for gethostname()
import envdir # pip install envdir

## 2017-09-27 : kmogged : Print standard output for this range of verbosity values
VERBOSITY_OUTPUT = ['3', '4', 'notice', 'n', '5', '6', '7', '8', 'info', 'i', '9', 'debug', 'd']

def debug( level, *objs ):
	try:
		if level <= int( os.getenv( "DEBUG" ) ):
			print( "DEBUG(%d):" % level, *objs, file=sys.stderr )
			sys.stderr.flush()
	except:
		pass


def do_backup( args, path_dir ):
	## 2017-09-26 : kmogged : Only output with a verbosity of 3 or more
	if ( args['verbosity'] in VERBOSITY_OUTPUT ):
		print( "[ backing up '%s' to '%s' .. ]" % ( path_dir, args[ "s3_bucket_path" ] ) )
	debug( 9, "do_backup(): args:", args )
	
	cmd = [ "duplicity",
		"--asynchronous-upload",
		"--full-if-older-than", args[ "full_if_older_than" ],
		"--volsize", args[ "volsize" ],
		]


	if args.get( "verbosity" ): ## 2017-09-26 : kmogged : support and pass-through duplicity's verbosity argument
		cmd += [ '--verbosity', args['verbosity'] ]
	if args.get( "no_print_statistics" ): ## 2017-09-26 : kmogged : support and pass-through duplicity's no-print-statistics argument
		cmd += [ "--no-print-statistics" ]
	if args.get( "dry_run" ):
		cmd += [ "--dry-run" ]
	for a in args[ "exclude" ] or []:
		cmd += "--exclude", a # optional excludes override includes
	for a in args[ "include" ] or []:
		cmd += "--include", a # optional includes specify specific patterns
	if args[ "include" ]:
		cmd += "--exclude", "**" # includes imply a trailing exclude
	cmd += "./", "%(s3_bucket_path)s/%(hostname)s__%(bucket_subdir)s" % args
	debug( 9, "do_backup(): cmd:", cmd )
	
	sys.stdout.flush()
        try:
                subprocess.call( cmd, stderr=subprocess.STDOUT )
        except OSError, e:
                if e.errno == os.errno.ENOENT:
                        print( "ERROR: 'duplicity' not installed", file=sys.stderr )
                else:
                        raise
#                sys.exit( 2 )
	## 2017-09-26 : kmogged : Only output with a verbosity of 3 or more.  If I don't do this it emails a blank email
	if ( args['verbosity'] in VERBOSITY_OUTPUT ):
		print( "" )
	sys.stdout.flush()


def do_clean( args, path_dir ):
	## 2017-09-26 : kmogged : Only output with a verbosity of 3 or more
	if ( args['verbosity'] in VERBOSITY_OUTPUT ):
		print( "[ cleaning '%s' on '%s' .. ]" % ( path_dir, args[ "s3_bucket_path" ] ) )
	
	cmd = [ "duplicity" ]
	if args.get( "verbosity" ): ## 2017-09-26 : kmogged : support and pass-through duplicity's verbosity argument
		cmd += [ '--verbosity', args['verbosity'] ]
	if args.get( "no_print_statistics" ): ## 2017-09-26 : kmogged : support and pass-through duplicity's no-print-statistics argument
		cmd += [ "--no-print-statistics" ]
	if args.get( "dry_run" ):
		cmd += [ "--dry-run" ]
	cmd += [ "remove-all-but-n-full", args[ "remove_all_but_n_full" ], "--force",
		"%(s3_bucket_path)s/%(hostname)s%(bucket_subdir)s" % args ]
	
	debug( 9, "do_clean(): cmd:", cmd )
	
	sys.stdout.flush()
	subprocess.call( cmd, stderr=subprocess.STDOUT )
	## 2017-09-26 : kmogged : Only output with a verbosity of 3 or more.  If I don't do this it emails a blank email
	if ( args['verbosity'] in VERBOSITY_OUTPUT ):
		print( "" )
	sys.stdout.flush()

## 2017-09-27 : kmogged : This function makes it easier to support duplicity's mixed case arguments 
def lowercase_arg ( value ):
	return value.lower()

## get config from envdir..
path_envdir = os.getenv( "DUPLICITY_ENVDIR", "~/.config/envdir/duplicity/" )
## 2017-09-27 : kmogged : A lot of different verbosity values to support duplicity.
VERBOSITY_VALUES = ['0', '1', '2', '3', '4', '5', '6', '7', '8', '9','error','warning','notice','info','debug','e','w','n','i','d']
try:
	envdir.open( path_envdir )
except:
	print( "ERROR: invalid envdir config dir:", path_envdir, file=sys.stderr )
	sys.exit( 2 )


## parse args..
parser = argparse.ArgumentParser( description='Use duplicity to backup directories to S3.')
parser.add_argument( '--dry-run', default=False, action='store_true', help="Don't actually do anything")
parser.add_argument( '--full-if-older-than', default='180D', action='store', help='BACKUP: Force full backup if last full is oder than X')
parser.add_argument( '--volsize', default='250', action='store', help='BACKUP: Set volume size')
parser.add_argument( '--exclude', action='append', help='BACKUP: excludes (before includes)')
parser.add_argument( '--include', action='append', help='BACKUP: includes (after excludes; imples --exclude "**" )')
parser.add_argument( '--clean', default=False, action='store_true', help='CLEAN: Clean old full backups off S3')
parser.add_argument( '--remove-all-but-n-full', default='2', action='store', help='CLEAN: Remove all but N full')
## 2017-09-26 : kmogged : Support duplicity's --verbosity argument
parser.add_argument( '-v', '--verbosity', metavar='[0-9]', type=lowercase_arg, help='Adjust output verbosity for duplicity', default='4', action='store', choices=VERBOSITY_VALUES )
## 2017-09-26 : kmogged : Support duplicity's --no-print-statistics argument
parser.add_argument( '--no-print-statistics', default=False, action='store_true', help='By default duplicity will print statistics.  This switch disables that behavior')
## 2017-09-26 : kmogged : Add a convience argument to create completely silent output unless there is an error
parser.add_argument( '-s', '--silent', default=False, action='store_true', help='Convenience switch, which is the same as using arguments -v 0 --no-print-statistics')
parser.add_argument( 's3_bucket_path', action='store', help='e.g.: s3+http://my-bucket-name/my-device-dir')
parser.add_argument( 'dir_to_backup', action='store', nargs='+' )
args = vars( parser.parse_args() )
args[ "hostname" ] = socket.gethostname()
## 2017-09-27 : kmogged : If --silent argument is used set the arguments verbosity to 0 and --no-print-statistics to true
if ( args [ 'silent' ] ):
	args[ 'verbosity' ] = '0'
	args[ 'no_print_statistics' ] = True

debug( 0, "ARGS:", args )


for path_dir in args[ "dir_to_backup" ]:
	path_dir = os.path.normpath( path_dir ) # remove any extra slashes
	try: ## 2017-09-26 : kmogged : Only output with a verbosity of 3 or more
		if ( args['verbosity'] in VERBOSITY_OUTPUT ):
			print( "#################################################" )
		
		os.chdir( path_dir )
		
## tkooda : 2015-11-11 : safe for python2.6
##		path_safe = re.sub( "[^a-z0-9]", "_", path_dir, flags=re.I )
		path_safe = re.sub( "[^a-zA-Z0-9]", "_", path_dir ).strip( "_" )
		path_lock = os.path.join( "/tmp/.lock.dup-s3.%s" % path_safe )
		with open( path_lock, "a+" ) as fd: # create but do not trunicate
			fcntl.flock( fd, fcntl.LOCK_EX | fcntl.LOCK_NB ) # attempt exclusive lock
			
			args[ "bucket_subdir" ] = path_safe
			
			do_backup( args, path_dir )
			if args[ "clean" ]:
				do_clean( args, path_dir )
			
			fcntl.flock( fd, fcntl.LOCK_UN ) # release lock
		
	except OSError as e:
		print( "ERROR:", e ) # os.chdir()
                import traceback
                traceback.print_exc( file=sys.stderr )
                sys.stderr.flush()
                sys.exit( 1 )
        
	except IOError:
		print( "ERROR: existing process already has lock on file:", path_lock )
	## 2017-09-26 : kmogged : Only output with a verbosity of 3 or more.  If I don't do this it emails a blank email
	if ( args['verbosity'] in VERBOSITY_OUTPUT ):
		print( "" )

